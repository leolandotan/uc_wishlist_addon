<?php

/**
 * Implements hook_menu_alter().
 */
function uc_wishlist_addon_menu_alter(&$items) {
  // Update uc wishlist list page to my-wishlist.
  $items['my-wishlist'] = $items['wishlist'];
  $items['my-wishlist']['page callback'] = 'uc_wishlist_addon_uc_wishlist_display';
  
  // Unset the old wishlist item.
  unset($items['wishlist']);

  // Unset the file key w/c is not used since the function is in the same file.
  unset($items['my-wishlist']['file']);
}

/**
 * Updates uc wishlist's display function to add empty markup.
 */
function uc_wishlist_addon_uc_wishlist_display($wid = NULL, $mode = 'wid') {
  module_load_include('module', 'uc_wishlist');
  module_load_include('inc', 'uc_wishlist', 'uc_wishlist.pages');

  global $user;
  $output = '';
  $own = FALSE;

  if (empty($wid)) {
    // Default to the current user's wish list if no wishlist ID is specified.
    $wid = uc_wishlist_get_wid();
    $own = TRUE;
  }
  elseif (is_object($wid)) {
    // $wid is actually a user account.
    $wid = uc_wishlist_get_wid($wid->uid);
  }

  if (!$own && $wid == uc_wishlist_get_wid()) {
    $own = TRUE;
  }

  // Attempt to load the wish list.
  $wishlist = uc_wishlist_load($wid);

  // Handle a non-existent wish list.
  if (!$wishlist) {
    // If the requested list was for the current user...
    if ($own) {
      // Display a message letting them know their list is empty.
      drupal_set_title(t('Wish list'));
      drupal_set_message(t("You have not added any products to your wish list. You can add any product from the store to your wish list by clicking the 'Add to wish list' button on the product's page."));

      return uc_wishlist_addon_uc_wishlist_blank_table();
    }
    else {
      // Otherwise send them to the search form.
      drupal_set_message(t('The wish list you requested could not be found.  Perhaps you can try looking for it through the wish list search form below.'));
      drupal_goto('wishlist/search');
    }
  }
  // Display only if it's my own or it's not private.
  if (!$wishlist->private || $own) {
    drupal_set_title($wishlist->title);

    // Add the settings form if the user is viewing his own wish list.
    if ($own) {
      if (!$user->uid) {
        drupal_set_message(filter_xss(t('You must <a href="!login_url">login</a> or <a href="!register_url">register</a> to save your wish list.', array('!login_url' => url('user/login'), '!register_url' => url('user/register')))));
      }

      $collapsed = TRUE;
    }

    // Add expiration information to the display.
    if ($wishlist->expiration < REQUEST_TIME) {
      $output .= '<p>' . t('This wish list may no longer be valid. It was for an event on @date.', array('@date' => format_date($wishlist->expiration))) . '</p>';
    }
    elseif ($wishlist->expiration > 0) {
      $output .= '<p>' . t('This wish list is valid until @date.', array('@date' => format_date($wishlist->expiration))) . '</p>';
    }

    $items = uc_wishlist_get_contents($wid);

    if (empty($items)) {
      return uc_wishlist_addon_uc_wishlist_blank_table();
    }

    $form = drupal_get_form('uc_wishlist_view_form', $items, $wid, $own);
    $output .= drupal_render($form);
  }
  else {
    drupal_goto('wishlist/search');
  }
  return $output;
}

/**
 * Helper function.
 *
 * Returns the empty table for uc wishlist's wishlist view page.
 */
function uc_wishlist_addon_uc_wishlist_blank_table() {
  $header = array(t('Products'), t('Redeem'), t('Remove'));
  $row = array(
    array(
      'data' => array(
        array(
          'data' => t('There are no products on this wish list.'),
          'colspan' => 3
        ),
      ),
    )
  );

  $output = '<div id="uc-wishlist-view-form-empty" class="empty-container">';
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_form_alter().
 */
function uc_wishlist_addon_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_wishlist_view_form') {
    // This is used to update uc wishlist's view page submit to update the 
    // wishlist link to my-wishlist.
    unset($form['#submit']);
    $form['#submit'][] = 'uc_wishlist_addon_uc_wishlist_view_form_submit';
  }

  if ((strpos($form_id, 'uc_product_add_to_cart_form_') === 0) ||
      (strpos($form_id, 'uc_product_kit_add_to_cart_form_') === 0)) {

    // This is used to update the submit callback of Add to Wishlist button 
    // to update the uc_wishlist_add_item function.
    unset($form['actions']['wishlist']['#submit']);
    $form['actions']['wishlist']['#submit'] = array('uc_wishlist_addon_uc_wishlist_add_to_wishlist_submit');
  }
}

/**
 * Submit callback for the Add to Wishlist button
 */
function uc_wishlist_addon_uc_wishlist_add_to_wishlist_submit($form, &$form_state) {
  uc_wishlist_addon_uc_wishlist_add_item(
    $form_state['values']['nid'],
    $form_state['values']['qty'],
    module_invoke_all('uc_add_to_cart_data', $form_state['values'])
  );
}

/**
 * Submit callback for the Wishlist Update button
 */
function uc_wishlist_addon_uc_wishlist_view_form_submit($form, &$form_state) {
  module_load_include('module', 'uc_wishlist');
  global $user;

  if (isset($form_state['values']['op']) && !empty($form_state['values']['op'])) {
    if ($form_state['values']['op'] == $form_state['values']['update']) {

      uc_wishlist_update_item_object((object) $form_state['values']);

      drupal_set_message(t('Leo: Your wish list has been updated.'));

      $form_state['redirect'] = 'my-wishlist';
    }
  }
  else {
    // Find wish list item associated with 'add to cart' submitted.
    foreach ($form_state['values'] as $key => $val) {
      if (strpos($key, 'addcart-') === 0) {
        $wpid = intval(substr($key, 8));
      }
    }

    if ($wpid) {
      foreach ($form_state['values']['items'] as $key => $item) {
        if ($item['wpid'] == $wpid) {
          if ($item['qty'] == 0) {
            $form_state['values']['items'][$key]['qty'] = 1;
          }
        }
        else {
          $form_state['values']['items'][$key]['qty'] = 0;
        }
      }

      uc_wishlist_addon_uc_wishlist_add_items_to_cart((object) $form_state['values']);
      drupal_set_message(t('The item(s) have been added to your shopping cart.'));

      $form_state['redirect'] = 'cart';
    }
  }
}

/**
 * Adds an item to a user's wish list.
 *
 * This function is updated from uc_wishlist for the wishlist to my-wishlist
 */
function uc_wishlist_addon_uc_wishlist_add_item($nid, $qty = 1, $data = NULL, $wid = NULL, $msg = TRUE, $check_redirect = TRUE) {
  module_load_include('module', 'uc_wishlist');

  $wid = $wid ? $wid : uc_wishlist_get_wid();
  $created = FALSE;

  if (!$wid || $wid === NULL) {
    $wid = uc_wishlist_create_wishlist();

    if (!$wid) {
      drupal_set_message(t('Could not create wish list. Adding item failed.'), 'error');
      return FALSE;
    }
    $created = TRUE;
  }

  $node = node_load($nid);

  // Adding data variables.
  if (empty($data)) {
    $data = array('module' => 'uc_product');
  }
  elseif (!array_key_exists('module', $data)) {
    $data['module'] = 'uc_product';
  }

  // If Product Kit is enable, then add products into data array.

  if (module_exists('uc_product_kit') && $node->type == 'product_kit') {

    // Adding products of the product kit into data object.
    $products = $node->products;

    foreach ($products as $pid => $product) {

      $data['products'][$pid]['nid'] = $pid;
      $data['products'][$pid]['qty'] = $product->qty;

      // Creating attributes array.
      $attributes = array();

      // Getting attributes list of the product.
      $product_attributes = $product->attributes;

      // Iterating through the attributes list.
      foreach ($product_attributes as $aid => $product_attribute) {
        $attribute[$product_attribute->aid] = $product_attribute->default_option;
      }

      // Assigning attributes to data array.
      $data['products'][$pid]['attributes'] = $attributes;
    }
  }

  // If product kit module is install in the site, then we need to check if the
  // product is product kit or product.
  if (module_exists('uc_product_kit')) {
    $supported_node_types = array_merge(array_keys(uc_product_node_info()), array_keys(uc_product_kit_node_info()));
  }
  else {
    $supported_node_types = array_keys(uc_product_node_info());
  }

  // Checking if the node is product type or product kit type.

  if (!in_array($node->type, $supported_node_types)) {
    drupal_set_message(t('@title is not a product. Unable to add to wish list.', array('@title' => $node->title)), 'error');
    return;
  }

  $result = module_invoke_all('add_to_cart', $nid, $qty, $data);
  if (is_array($result) && !empty($result)) {
    foreach ($result as $row) {
      if ($row['success'] === FALSE) {
        if (isset($row['message']) && !empty($row['message'])) {
          $message = $row['message'];
        }
        else {
          $message = t('Sorry, that item is not available for purchase at this time.');
        }
        drupal_set_message(filter_xss($message), 'error');
        return;
      }
    }
  }

  $result = db_query("SELECT * FROM {uc_wishlist_products} WHERE wid = :wid AND nid = :nid AND data = :data", array(':wid' => $wid, ':nid' => $nid, ':data' => serialize($data)));
  $item = $result->fetchObject();

  // If the item isn't in the cart yet, add it.
  if (is_null($item) || $item === FALSE) {
    $id = db_insert('uc_wishlist_products')
    ->fields(array(
          'wid' => $wid,
          'nid' => $nid,
          'qty' => $qty,
          'changed' => REQUEST_TIME,
          'data' => serialize($data),
          'purchase' => '',
    ))
    ->execute();
    if ($msg) {
      drupal_set_message(t('<b>@product-title</b> added to <a href="!url">your wish list</a>.', array('@product-title' => filter_xss($node->title), '!url' => url('my-wishlist'))));
    }
  }
  else {
    // Update the item instead.
    $qty += $item->qty;
    $wpid = $item->wpid;

    uc_product_update_wishlist_item($nid, $data, min($qty, 999999), $wid, $wpid);

    if ($msg) {
      drupal_set_message(filter_xss(t('Your <a href="!url">wish list</a> has been updated.', array('!url' => url('my-wishlist')))));
    }
  }

  if ($check_redirect) {
    if (isset($_GET['destination'])) {
      drupal_goto();
    }
  }
  if ($created) {
    drupal_goto('my-wishlist');
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function uc_wishlist_addon_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Make this module have higher weight than uc_wishlist in order for
    // alterations to be done.
    $group = $implementations['leo'];
    unset($implementations['leo']);
    $implementations['leo'] = $group;
  }
  if ($hook == 'user_login') {
    // Remove uc_wishlist's hook to user_login to change uc_wishlist_add_item.
    $module_name = 'uc_wishlist';
    unset($implementations[$module_name]);
  }
}

/**
 * Implements hook_user_login().
 *
 * This overrides uc wishlist's hook_user_login to update uc_wishlist_add_item
 * to uc_wishlist_addon_uc_wishlist_add_item.
 */
function uc_wishlist_addon_user_login(&$edit, $account) {
  module_load_include('module', 'uc_wishlist');

  $saved_id = empty($_SESSION['uc_wishlist_uid']) ? 0 : $_SESSION['uc_wishlist_uid'];
  $oldwid = db_query("SELECT wid FROM {uc_wishlists} WHERE uid = :uid", array(':uid' => $saved_id))->fetchField();
  $newwid = uc_wishlist_get_wid();
  if ($oldwid && $newwid) {
    $res = db_query("SELECT * FROM {uc_wishlist_products} WHERE wid = :wid", array(':wid' => $oldwid));
    foreach ($res as $obj) {
      // NOTE: the delete must precede uc_wishlist_add_item because
      // it may update the old record but we expect it to insert a new record.
      db_delete('uc_wishlist_products')
      ->condition('wpid', $obj->wpid)
      ->execute();
      uc_wishlist_addon_uc_wishlist_add_item($obj->nid, $obj->qty, unserialize($obj->data), $newwid);
    }
    db_delete('uc_wishlists')
    ->condition('wid', $oldwid)
    ->execute();
  }
  elseif ($oldwid && !$newwid) {
    db_update('uc_wishlists')
    ->fields(array(
      'uid' => $account->uid,
    ))
    ->condition('wid', $oldwid)
    ->execute();
  }
}
